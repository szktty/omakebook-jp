.. _Autoconf:

==============
8 章: 自動設定
==============

.. index:: 自動設定

.. index:: 静的オブジェクト, 静的ルール

一度だけ評価されればいい処理を書く
==================================

自動設定する内容は、そう頻繁に変わることのないものが大半です。ホスト環境に依存する設定やビルドの方針に関する設定は、 OMake を起動するたびに設定し直す必要はありません。このような一度だけ評価できればいい処理を書くために、 OMake には **静的オブジェクト** と **静的ルール** が用意されています。静的ルールは後から導入されたもので、静的オブジェクトよりも便利です。通常は静的ルールを使うといいでしょう。


.. index:: 静的オブジェクト, static.

静的オブジェクト
----------------

**静的オブジェクト** (``static`` オブジェクト) は、一度初期化されたら OMake ファイルが書き換えられない限り (または ``*.omc`` ファイルが削除されない限り) 保持されます。次のコードでは ``latex`` コマンドの有無を ``LATEX_ENABLED`` 変数に代入します。この OMake ファイルを書き換えない限り、以降の OMake 実行時には評価されません。

::

 open configure/Configure
 static. =
     LATEX_ENABLED = $(CheckProg latex)

静的オブジェクト節は、必ず一度は評価されます。上記の例では、例え他の OMake ファイルで ``LATEX_ENABLED`` 変数を使わなくても必ず評価されます。


.. index:: 静的ルール, .STATIC

静的ルール
----------

**静的ルール** (``.STATIC`` ルール) は静的オブジェクトとほとんど同じですが、遅延評価されることと依存関係を指定できる点が異なります。静的オブジェクトで示した例を静的ルールで書き換えると、次のようになります。

::

 open configure/Configure
 .STATIC =
     LATEX_ENABLED = $(CheckProg latex)

静的オブジェクトでは、節は必ず一度は評価されます。しかし、静的ルールでは節内の変数が必要にならなければ評価されません。他の OMake ファイルで ``LATEX_ENABLED`` 変数を一切使わなければ、この節はいつまでも評価されません。

また通常のルールと同様に、静的ルールには依存関係を指定できます。依存するファイルやルールに変更があれば、静的ルールは再評価されます。例として、設定ファイル ``myapp.conf`` の内容を変数に代入する静的ルールを次に示します。

::

 .STATIC: myapp.conf
     CONTENT = $(shell cat myapp-conf)
     export

この節はファイル ``myapp.conf`` の内容が変更されるたびに再評価され、変数 ``CONTENT`` の内容が更新されます。


静的オブジェクトと静的ルールのどちらを使えばよいか
--------------------------------------------------

特に理由がなければ静的ルールを使うといいでしょう。静的オブジェクトでは依存関係を指定できず、節の評価が不要であっても必ず評価されてしまいます。静的オブジェクトを使える場面はその逆で、依存関係を指定する必要がなく、節が必ず評価されなければならない場合です。最もそのような状況でも静的ルールで済むので、静的オブジェクトをわざわざ使う必要はないと思います。

