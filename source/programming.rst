.. _OMakeProgramming:

==========================
4 章: OMake プログラミング
==========================

この章では、プログラミング言語としての OMake を解説します。


ビルドツールでプログラミング？
==============================

OMake はビルドツールですが、プログラミング言語でもあります。なまじ文法が make やシェルスクリプトに近いので簡単に使えそうに見えますが、実際に使うと関数やルールの扱いに戸惑うでしょう。 OMake に早く慣れるには、まず **OMake はプログラミング言語だと認識すること** です。なぜビルドツールにプログラミングが必要なのかと疑問に思われるかもしれませんが、ビルドは意外と複雑な処理なのです。ビルド仕様を Python で記述する `SCons <http://www.scons.org/>`_ 、 Ruby で記述する `Rake <http://rake.rubyforge.org/>`_ など、スクリプト言語の記述力を活用するビルドツールも増えています。


.. note:: **OMake は万能か**

   結論から言えば、 **誰かが便利なライブラリを作っていれば** OMake は万能になるでしょう。 **誰かが便利なライブラリを作っていれば** 。なんたって OMake はビルド向けのプログラミング言語のようなものですから、 **ライブラリがあればなんだってできます。ライブラリがあれば** 。

   ただ、万能であっても使いやすいとは限りません。専用のビルドツールがあるなら、大抵はそちらのほうが使いやすいはずです。 iPhone アプリケーションの開発なら Xcode 、 Java なら Ant や Maven 、 Ruby なら Rake 、等々。ビルドツールの戦国時代は当分続きそうです。


.. index:: コマンド

コマンド
========

..
 * シェルコマンドと OMake 専用シェル (OSH) がある


.. index:: 値

値
==

.. index:: シーケンス, 文字列

シーケンス (文字列)
-------------------

.. index:: 配列

配列
----


.. index:: マップ

マップ
------

.. index:: 真偽値

真偽値
------

.. 真とされる値、偽とされる値


数値
----

.. 比較




比較
----

.. index:: 変数

変数
====

.. index:: 変数; スコープ

変数のスコープ
--------------

.. index:: 関数


制御
====

.. index:: 条件分岐, if

条件分岐
--------

if

.. index:: 繰り返し, while

繰り返し
--------

while

.. index:: 列挙, foreach

列挙
----

foreach


.. index:: 論理式, and, or, not

論理式
------

and, or, not

.. index:: パターンマッチ, switch, match

パターンマッチ
--------------

switch, match


.. index:: プログラムの終了, exit

プログラムの終了
----------------

exit


.. index:: 関数

関数
====

..
 関数呼び出し
 Func() と $(Func) のみの行の違い、$(Func) は結果がコマンドとして実行される

.. index:: 関数; 関数オブジェクト

関数オブジェクト
----------------


.. index:: ルール

ルール
======


.. index:: ルール; 動的なルール定義

動的なルール定義
----------------


.. index:: クラス, オブジェクト

クラスとオブジェクト
====================


.. index:: 例外処理, try, raise

例外処理
========


.. index::
   single: DefineCommandVars()
   pair: 変数定義; コマンドライン

コマンドラインで変数を定義する
==============================

コマンドラインで「変数名=値」の形の引数を与えることで、変数を定義できます。この変数定義は次のタイミングで反映されます。

* OMake の実行開始時 (まだいずれの OMake ファイルも読み込まれていない段階)
* ``DefineCommandVars`` 関数を呼び出したとき

``--install`` オプションで生成される ``OMakeroot`` ファイルでは、 OMake ライブラリのロード後に ``DefineCommandVars`` 関数を呼んでいます。これは OMake ライブラリで必要な変数の初期化や設定を終えた後に、コマンドラインで指定された変数を再定義しています。

``OMakeroot``::

 # OMake ライブラリのロード
 open build/C
 open build/OCaml
 open build/LaTeX

 # コマンドラインで指定された変数を (再) 定義
 DefineCommandVars()


