.. _OMakeProgramming:

==========================
4 章: OMake プログラミング
==========================

この章では、プログラミング言語としての OMake をチュートリアル形式で解説します。一度に読み通す必要はないので、必要になったらその都度参照ください。また、都合上他の章と重複する内容もあります。

.. index:: SCons, Rake

ビルドツールでプログラミング？
==============================

OMake はビルドツールですが、プログラミング言語でもあります。なまじ文法が make やシェルスクリプトに近いので簡単に使えそうに見えますが、実際に使うと関数やルールの扱いに戸惑うでしょう。 OMake に早く慣れるには、まず **OMake はプログラミング言語だと認識すること** です。なぜビルドツールにプログラミングが必要なのかと疑問に思われるかもしれませんが、ビルドは意外と複雑な処理なのです。ビルド仕様を Python で記述する `SCons <http://www.scons.org/>`_ 、 Ruby で記述する `Rake <http://rake.rubyforge.org/>`_ など、スクリプト言語の記述力を活用するビルドツールも増えています。

とは言え、 OMake プログラミングを極めたいと思う人はまずいないでしょう。そこでこの章では、使う頻度の高い順に基本的な言語仕様を紹介していきます。

.. note:: **ある対話**

   |
   | **N**: ビルドでもプログラミングする羽目になるんですか。面倒だな。
   | **O**: ビルドファイルを書いてもいまいち達成感ないしね。
   | **S**: レッドブルでも飲んであきらめてください。

.. note:: **OMake は万能か**

   結論から言えば、 **誰かが便利なライブラリを作っていれば** OMake は万能になるでしょう。 **誰かが便利なライブラリを作っていれば** 。なんたって OMake はビルド向けのプログラミング言語のようなものですから、 **ライブラリがあればなんだってできます。ライブラリがあれば** 。

   ただ、万能であっても使いやすいとは限りません。専用のビルドツールがあるなら、大抵はそちらのほうが使いやすいはずです。 iPhone アプリケーションの開発なら Xcode 、 Java なら Ant や Maven 、 Ruby なら Rake 、等々。ビルドツールの戦国時代は当分続きそうです。


ステップ 1: シンプルなビルドファイルを書く
==========================================

まずはコマンドを並べるだけのシンプルなビルドファイルを読み書きできるようにしましょう。次に例を示します。

::

 # ダミーターゲット指定
 .PHONY: all

 PROG = program
 SRC = program.c

 all:
   gcc -o $(PROG) $(SRC)

 clean:
   rm $(PROG)

 .DEFAULT: all

この例では、 ``program.c`` をコンパイルして実行可能ファイル ``program`` を生成します。 ``all`` と ``clean`` の二つのターゲットを定義しており、 ``all`` を指定すれば ``program`` の生成を、 ``clean`` を指定すれば ``program`` の削除を行います。何もターゲットを指定しなければ ``all`` を指定したことになります。

使用例::

 # ターゲット未指定 (all が実行される)
 % omake

 # program を生成する
 % omake all

 # program を削除する
 % omake clean

この例には次の文法が含まれています。

* コメント
* 変数の宣言と代入
* 変数の参照
* シェルコマンドの実行
* ルール定義
* ``.PHONY`` ルール
* ``.DEFAULT`` ルール


.. index:: コメント

コメント
--------

コメントは ``#`` から行末までです。

::

 # コメント
 echo hello # hello と表示される

.. index:: 変数; 宣言と代入

変数の宣言と代入
----------------

.. index:: 変数; 参照

変数の参照
----------

.. index::
   single: OSH シェル
   pair: シェルコマンド; 実行

シェルコマンドの実行
--------------------

シェルコマンドは ``bash`` に似たフォーマットで記述します。

::

 pwd
 ls -a .
 echo hello

..
 * シェルコマンドと OMake 専用シェル (OSH) がある


.. index:: ビルドファイル; 構造

ビルドファイルの構造
--------------------

ビルドファイルは次の要素から構成されます。いずれも書く位置は自由です。

* 変数の宣言と代入
* シェルコマンドの実行
* ルール定義
* 関数定義 (後述)

慣習的に、ビルドファイルの構造は先の例のように変数定義とルール定義を前後に分けて書くことが多くなります。ビルド処理が複雑になるに従って、ビルドファイルが読みづらくなりがちになります。読みやすい構造を保つよう心がけるといいでしょう。

例::

 # 変数の宣言と代入
 SRC = hello.c

 # ルール定義
 hello: $(SRC)
   # シェルコマンド
   cc -o hello $(SRC)

 # 関数定義
 SayHello() =
   echo hello

OMake では、関数定義内でもルールを定義できます。特に関数の実行時に (ルール名を含む) 定義内容を決めることができ、これを利用する便利なビルド関数が多数実装されています。詳しくは :ref:`ルール <Rules>` で解説します。


.. index:: シーケンス, 文字列

文字列 (シーケンス)
-------------------

OMake のドキュメントやエラーメッセージでは、文字列はシーケンスとも呼ばれます。


関数呼び出し
------------

.. index:: 落とし穴; 関数呼び出し ≠  ルール実行

.. note:: **落とし穴: 関数呼び出し ≠  ルール実行**

   先に、関数定義内での動的なルール定義がビルド関数で活用されていることに触れました。
   CProgram


.. _IncludingFiles:

ファイルのインクルード
----------------------

* include と open の違い

.. index:: 配列


配列
^^^^


.. index:: マップ

マップ
^^^^^^

.. index:: 真偽値

真偽値
^^^^^^

.. 真とされる値、偽とされる値


数値
^^^^

.. 比較




比較
^^^^

.. index:: 変数

変数
----

.. index:: 変数; スコープ

変数のスコープ
^^^^^^^^^^^^^^

.. index:: 関数


制御
----

.. index:: 条件分岐, if

条件分岐
^^^^^^^^

if

.. index:: 繰り返し, while

繰り返し
^^^^^^^^

while

.. index:: 列挙, foreach

列挙
^^^^

foreach


.. index:: 論理式, and, or, not

論理式
^^^^^^

and, or, not

.. index:: パターンマッチ, switch, match

パターンマッチ
^^^^^^^^^^^^^^

switch, match


.. index:: プログラムの終了, exit

プログラムの終了
^^^^^^^^^^^^^^^^

exit


.. index:: 関数

関数
----

..
 関数呼び出し
 Func() と $(Func) のみの行の違い、$(Func) は結果がコマンドとして実行される

.. index:: 関数; 関数オブジェクト

関数オブジェクト
^^^^^^^^^^^^^^^^


.. index:: ルール

ルール
------


.. index:: ルール; 動的なルール定義

動的なルール定義
^^^^^^^^^^^^^^^^


.. index:: クラス, オブジェクト

クラスとオブジェクト
--------------------


.. index:: 例外処理, try, raise

例外処理
--------


.. index::
   single: DefineCommandVars()
   pair: 変数定義; コマンドライン

.. _DefineCommandVars:

コマンドラインで変数を定義する
------------------------------

コマンドラインで「変数名=値」の形の引数を与えることで、変数を定義できます。この変数定義は次のタイミングで反映されます。

* OMake の実行開始時 (まだいずれの OMake ファイルも読み込まれていない段階)
* ``DefineCommandVars`` 関数を呼び出したとき

``--install`` オプションで生成される ``OMakeroot`` ファイルでは、 OMake ライブラリのロード後に ``DefineCommandVars`` 関数を呼んでいます。これは OMake ライブラリで必要な変数の初期化や設定を終えた後に、コマンドラインで指定された変数を再定義しています。

``OMakeroot``::

 # OMake ライブラリのロード
 open build/C
 open build/OCaml
 open build/LaTeX

 # コマンドラインで指定された変数を (再) 定義
 DefineCommandVars()


