.. _BuildPrimer:

============================
1 章: ソフトウェアビルド入門
============================

ビルドとは何か
==============

ソフトウェア開発の主な作業は、人によるデータの編集です。プログラミング言語のソースコードを書いたり、画像編集ツールで画像ファイルを作ったり、設定ファイルを書いたり、ドキュメントを書いたり、等々。しかし、ソフトウェアはデータの編集だけで完成するものばかりではありません。コンピュータにソフトウェアを実行させるには、ソースコードをコンパイルしたり、コンパイル済みファイルを一つにまとめるなどの作業が必要です。さらにソフトウェアをリリース (納品や配布) できる形にするまでには、ユニットテストを実行する、ドキュメントを HTML や PDF に変換する、所定の位置にファイルをコピーするなどの様々な作業を行うことになります。ソフトウェアのビルドとは、これらの一連の作業を行ってリリース可能な形にすることです。


ビルドの例
----------

例として、次のディレクトリ構成のシンプルな C プログラムのビルドを考えます。

::

  mylib/
    src/
      mylib.h
      mylib.c
    test/
      test.c
    example/
      example.c

このライブラリの完成物は次のものとします。

* 静的ライブラリファイル (``mylib.a``)
* API ドキュメント (``doc`` ディレクトリ)
* サンプルプラグラム (``example``)

これに加えて、ライブラリのテストがすべて成功する (``test.c`` をコンパイルした ``test`` プログラムを実行し、エラーがなければ成功とする) ことも必須とします。 API ドキュメントは ``mylib.c`` 内に記述されており、 Doxygen というドキュメント生成ツールを使って生成することとします。

以上を考えて、ビルドでは次の処理を行うこととします。 C についてよく知らないと原理がわからないかもしれませんが、ここでは次のような処理でビルドを進めるものと考えてください。

静的ライブラリファイル (``mylib.a``)
  1. ``mylib.c`` をコンパイルし、オブジェクトファイル ``mylib.o`` を生成する。
  2. オブジェクトファイル ``mylib.o`` から静的ライブラリ ``mylib.a`` を生成する。

API ドキュメント (``doc`` ディレクトリ)
  1. ``doxygen`` コマンドを実行する。

サンプルプログラム (``example``)
  1. ``example.c`` をコンパイルし、オブジェクトファイル ``example.o`` を生成する。
  2. オブジェクトファイル ``example.o`` と静的ライブラリ ``mylib.a`` をリンクし、プログラム ``example`` を生成する。

テストの実行
  1. ``test.c`` をコンパイルし、オブジェクトファイル ``test.o`` を生成する。
  2. オブジェクトファイル ``test.o`` と静的ライブラリ ``mylib.a`` をリンクし、プログラム ``test`` を生成する。
  3. プログラム ``test`` を実行し、エラーが出ないかどうか確認する。

これらの処理がすべて成功すれば、ビルドは成功です。


ビルドで最も大事なこと
----------------------

先に示したビルドの処理には順序をつけています。当然ですが、静的ライブラリ ``mylib.a`` は初めから存在するファイルではなく、 ``mylib.o`` から生成されます。 ``mylib.o`` もまた、 ``mylib.c`` をコンパイルすることによって生成されます。サンプルプログラムやテストプログラムも同様で、さらに ``mylib.a`` がなければビルドは完了できません。ビルドでは **正しい順序で処理を実行することが重要** です。これは、 **依存関係に従って処理を実行する** と言い換えることができます。

このライブラリのビルドが成功したとみなすには、次の条件をすべて満たさなければならないということになります。

依存関係の図

* ``mylib.a`` が存在する。
* ``doc`` ディレクトリが存在する。
* ``example`` が存在する。
* ``test`` を実行し、エラーが


ビルドの自動化
==============

ビルドで行う作業は、一つ一つは単純な処理です。その上作業の手順も概ね決まっているとくれば、当然自動化を考えます。自動化すれば、手作業の手間とミスを減らせます。ただ、処理を順序立てて実行するだけならシェルスクリプトでも何でも構いませんが、ファイルを変更するたびに一からすべてビルドし直すのでは無駄な時間がかかります。そこでビルドツールを使えば、変更したファイルに依存する処理のみを実行できます。


依存関係

** ビルド時間の短縮 (インクリメンタルビルド)
** 手作業のミスの排除
** ビルドの詳細を知ることなくビルド可能

ビルドツールではターゲットから依存関係を逆算する
なぜかというと、一つのファイルが複数の生成されるファイルで必要になることがあるから

主なビルドツール
----------------

..
   make, GNU Make, Cons, SCons, Rake, Ant, Maven
   スケール

.. note:: **ある対話**

   |
   | **M**: なんだかたくさんビルドツールがありますけど、どれも機能は似たり寄ったりに見えます。ビルドファイルのフォーマットが違うだけ？
   | **S**: メインは依存関係の管理という点では変わらないので、まあその通りっちゃその通りですね。ビルドファイル内でちょっとしたプログラミングをしたいこともありますが、 make じゃできないから使い慣れたスクリプト言語を使おう、というわけで Rake や SCons のようなビルドツールが作られたりします。


ビルドで行う処理
================

* ビルドは決まった処理がほとんどだが、ホスト環境や設定によっては事前処理が必要

configure, make, make install ...

例えば伝統的な make を使うビルドでは、ユーザは次のコマンドを順に入力するだけで済むことがほとんどです。

::

 % ./configure
 % make
 % make install

.. index:: configure, Autoconf, Makefile

この一連のコマンドは、「ホスト環境の調査 (``configure``) 」「ソースコードのビルド (``make``) 」「ビルドしたファイルのインストール (``make install``) 」を順に行います。

make を使うビルドでは、よく ``configure`` コマンドを事前に実行します。シェルスクリプトを併用します。このシェルスクリプトは単純な処理しかできない ``Makefile`` を補い、ビルド設定のための処理を担当します。 ``configure`` スクリプトはホスト環境を調べ、ユーザが (``configure`` スクリプトにコマンドラインオプションで) 指定するビルド設定に沿った ``Makefile`` を生成します。文章にするとそれほど難しい処理ではないように思えますが、 ``configure`` スクリプトの内容は条件分岐の嵐です。 ``configure`` スクリプトはツール (Autoconf) で生成するので多少は楽ができますが、それでもある程度の規模のソフトウェアになると、必要な処理をシェルスクリプトで書いて ``configure`` スクリプトに埋め込むことが多くなります。 ``Makefile`` では単純な処理しかできない分、せっせとシェルスクリプトを書くことになります。

SCons, Rake

